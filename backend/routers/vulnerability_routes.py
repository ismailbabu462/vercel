"""
Vulnerability routes for API endpoints.
This router contains all vulnerability-related endpoints extracted from server.py
"""

from fastapi import APIRouter, HTTPException, Depends
from sqlalchemy.orm import Session
from typing import List

from database import get_db
from dependencies import get_current_active_user
from services.crud_service import (
    create_vulnerability,
    get_vulnerabilities_by_project,
    get_vulnerability_by_id,
    update_vulnerability,
    delete_vulnerability,
    get_project_by_id
)
from services.model_service import (
    Vulnerability,
    VulnerabilityCreate,
    VulnerabilityUpdate,
    db_vulnerability_to_pydantic
)

router = APIRouter(prefix="/api", tags=["Vulnerabilities"])


@router.post("/projects/{project_id}/vulnerabilities", response_model=Vulnerability)
async def create_vulnerability_endpoint(
    project_id: str,
    vuln_data: VulnerabilityCreate,
    current_user = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Create a new vulnerability for a project"""
    # Verify project exists and belongs to current user
    project = get_project_by_id(project_id, current_user.id, db)
    if not project:
        raise HTTPException(
            status_code=404,
            detail="Project not found or access denied"
        )
    
    # Additional security validation (redundant but extra safety)
    valid_severities = ['critical', 'high', 'medium', 'low']
    if vuln_data.severity not in valid_severities:
        raise HTTPException(
            status_code=400,
            detail=f"Invalid severity. Must be one of: {valid_severities}"
        )
    
    # Create vulnerability using service
    db_vuln = create_vulnerability(project_id, current_user.id, vuln_data.dict(), db)
    
    return db_vulnerability_to_pydantic(db_vuln)


@router.get("/projects/{project_id}/vulnerabilities", response_model=List[Vulnerability])
async def get_project_vulnerabilities_endpoint(
    project_id: str,
    current_user = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Get all vulnerabilities for a project"""
    # Verify project belongs to current user
    project = get_project_by_id(project_id, current_user.id, db)
    if not project:
        raise HTTPException(
            status_code=404,
            detail="Project not found or access denied"
        )
    
    # Get vulnerabilities using service
    db_vulns = get_vulnerabilities_by_project(project_id, db)
    return [db_vulnerability_to_pydantic(vuln) for vuln in db_vulns]


@router.get("/vulnerabilities/{vuln_id}", response_model=Vulnerability)
async def get_vulnerability_endpoint(
    vuln_id: str,
    current_user = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Get a specific vulnerability"""
    # Get vulnerability using service
    vuln = get_vulnerability_by_id(vuln_id, current_user.id, db)
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return db_vulnerability_to_pydantic(vuln)


@router.put("/vulnerabilities/{vuln_id}", response_model=Vulnerability)
async def update_vulnerability_endpoint(
    vuln_id: str,
    vuln_update: VulnerabilityUpdate,
    current_user = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Update a vulnerability"""
    # Validate severity if provided
    if vuln_update.severity is not None:
        valid_severities = ['critical', 'high', 'medium', 'low']
        if vuln_update.severity not in valid_severities:
            raise HTTPException(
                status_code=400,
                detail=f"Invalid severity. Must be one of: {valid_severities}"
            )
    
    # Update vulnerability using service
    vuln = update_vulnerability(vuln_id, current_user.id, vuln_update.dict(exclude_unset=True), db)
    if not vuln:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return db_vulnerability_to_pydantic(vuln)


@router.delete("/vulnerabilities/{vuln_id}")
async def delete_vulnerability_endpoint(
    vuln_id: str,
    current_user = Depends(get_current_active_user),
    db: Session = Depends(get_db)
):
    """Delete a vulnerability"""
    # Delete vulnerability using service
    success = delete_vulnerability(vuln_id, current_user.id, db)
    if not success:
        raise HTTPException(status_code=404, detail="Vulnerability not found")
    
    return {"message": "Vulnerability deleted successfully"}
